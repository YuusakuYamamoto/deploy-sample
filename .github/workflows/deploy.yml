name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  OCIR_REGION: nrt
  OCIR_NAMESPACE: ${{ secrets.OCIR_NAMESPACE }}
  PROJECT_NAME: sdb-sample

jobs:
  iac:
    name: Infrastructure as Code
    runs-on: ubuntu-latest
    needs: build-push
    if: github.ref == 'refs/heads/main'
    defaults:
      run:
        working-directory: infra
    
    outputs:
      frontend_ci_id: ${{ steps.terraform.outputs.frontend_ci_id }}
      backend_ci_id: ${{ steps.terraform.outputs.backend_ci_id }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0
          terraform_wrapper: false
      
      - name: Configure OCI CLI
        uses: oracle-actions/run-oci-cli-command@v1.3.2
        env:
          OCI_CLI_USER: ${{ secrets.OCI_CLI_USER }}
          OCI_CLI_TENANCY: ${{ secrets.OCI_CLI_TENANCY }}
          OCI_CLI_FINGERPRINT: ${{ secrets.OCI_CLI_FINGERPRINT }}
          OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_CLI_PRIVATE_KEY }}
          OCI_CLI_REGION: ${{ secrets.OCI_CLI_REGION }}
        with:
          command: 'oci --version'
      
      - name: Terraform Init
        run: terraform init
      
      - name: Terraform Format Check
        run: terraform fmt -check -diff -recursive
      
      - name: Terraform Plan
        run: terraform plan -out=tfplan
        env:
          TF_VAR_user_ocid: ${{ secrets.OCI_CLI_USER }}
          TF_VAR_tenancy_ocid: ${{ secrets.OCI_CLI_TENANCY }}
          TF_VAR_fingerprint: ${{ secrets.OCI_CLI_FINGERPRINT }}
          TF_VAR_private_key: ${{ secrets.OCI_CLI_PRIVATE_KEY }}
          TF_VAR_compartment_id: ${{ secrets.OCI_COMPARTMENT_ID }}
          TF_VAR_ocir_repository: ${{ env.OCIR_REGION }}.ocir.io/${{ env.OCIR_NAMESPACE }}/${{ env.PROJECT_NAME }}
          TF_VAR_image_tag: ${{ github.sha }}
          TF_VAR_database_password: ${{ secrets.DATABASE_PASSWORD }}
      
      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        env:
          TF_VAR_user_ocid: ${{ secrets.OCI_CLI_USER }}
          TF_VAR_tenancy_ocid: ${{ secrets.OCI_CLI_TENANCY }}
          TF_VAR_fingerprint: ${{ secrets.OCI_CLI_FINGERPRINT }}
          TF_VAR_private_key: ${{ secrets.OCI_CLI_PRIVATE_KEY }}
          TF_VAR_compartment_id: ${{ secrets.OCI_COMPARTMENT_ID }}
          TF_VAR_ocir_repository: ${{ env.OCIR_REGION }}.ocir.io/${{ env.OCIR_NAMESPACE }}/${{ env.PROJECT_NAME }}
          TF_VAR_image_tag: ${{ github.sha }}
          TF_VAR_database_password: ${{ secrets.DATABASE_PASSWORD }}
      
      - name: Get Terraform Outputs
        id: terraform
        run: |
          echo "frontend_ci_id=$(terraform output -raw frontend_container_instance_id)" >> $GITHUB_OUTPUT
          echo "backend_ci_id=$(terraform output -raw backend_container_instance_id)" >> $GITHUB_OUTPUT

  build-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    strategy:
      matrix:
        service: [frontend, backend]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to OCIR
        uses: oracle-actions/login-ocir@v1.3.0
        env:
          OCI_CLI_USER: ${{ secrets.OCI_CLI_USER }}
          OCI_CLI_TENANCY: ${{ secrets.OCI_CLI_TENANCY }}
          OCI_CLI_FINGERPRINT: ${{ secrets.OCI_CLI_FINGERPRINT }}
          OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_CLI_PRIVATE_KEY }}
          OCI_CLI_REGION: ${{ secrets.OCI_CLI_REGION }}
        with:
          auth_token: ${{ secrets.OCI_AUTH_TOKEN }}
      
      - name: Build and push ${{ matrix.service }} image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.OCIR_REGION }}.ocir.io/${{ env.OCIR_NAMESPACE }}/${{ env.PROJECT_NAME }}:${{ matrix.service }}-${{ github.sha }}
            ${{ env.OCIR_REGION }}.ocir.io/${{ env.OCIR_NAMESPACE }}/${{ env.PROJECT_NAME }}:${{ matrix.service }}-latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to OCI Container Instances
    runs-on: ubuntu-latest
    needs: [iac, build-push]
    if: github.ref == 'refs/heads/main'
    
    strategy:
      matrix:
        include:
          - service: frontend
            ci_id_var: frontend_ci_id
          - service: backend
            ci_id_var: backend_ci_id
    
    steps:
      - name: Configure OCI CLI
        uses: oracle-actions/run-oci-cli-command@v1.3.2
        env:
          OCI_CLI_USER: ${{ secrets.OCI_CLI_USER }}
          OCI_CLI_TENANCY: ${{ secrets.OCI_CLI_TENANCY }}
          OCI_CLI_FINGERPRINT: ${{ secrets.OCI_CLI_FINGERPRINT }}
          OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_CLI_PRIVATE_KEY }}
          OCI_CLI_REGION: ${{ secrets.OCI_CLI_REGION }}
        with:
          command: 'oci --version'
      
      - name: Set container configuration for ${{ matrix.service }}
        run: |
          if [ "${{ matrix.service }}" = "frontend" ]; then
            echo "IMAGE_URL=${{ env.OCIR_REGION }}.ocir.io/${{ env.OCIR_NAMESPACE }}/${{ env.PROJECT_NAME }}:frontend-${{ github.sha }}" >> $GITHUB_ENV
            echo 'ENV_VARS={"NODE_ENV": "production", "PORT": "3000"}' >> $GITHUB_ENV
            echo "DISPLAY_NAME=nextjs" >> $GITHUB_ENV
          else
            echo "IMAGE_URL=${{ env.OCIR_REGION }}.ocir.io/${{ env.OCIR_NAMESPACE }}/${{ env.PROJECT_NAME }}:backend-${{ github.sha }}" >> $GITHUB_ENV
            echo 'ENV_VARS={"NODE_ENV": "production", "PORT": "3001"}' >> $GITHUB_ENV
            echo "DISPLAY_NAME=nestjs" >> $GITHUB_ENV
          fi
      
      - name: Debug environment variables for ${{ matrix.service }}
        run: |
          echo "=== Environment Variables Debug ==="
          echo "SERVICE: ${{ matrix.service }}"
          echo "IMAGE_URL: ${IMAGE_URL}"
          echo "ENV_VARS: ${ENV_VARS}"
          echo "DISPLAY_NAME: ${DISPLAY_NAME}"
          echo "CI_ID: ${{ needs.iac.outputs[matrix.ci_id_var] }}"
          echo "OCIR_REGION: ${{ env.OCIR_REGION }}"
          echo "OCIR_NAMESPACE: ${{ env.OCIR_NAMESPACE }}"
          echo "PROJECT_NAME: ${{ env.PROJECT_NAME }}"
          echo "GITHUB_SHA: ${{ github.sha }}"
      
      - name: Validate JSON syntax for ${{ matrix.service }}
        run: |
          echo "=== JSON Syntax Validation ==="
          echo "ENV_VARS JSON validation:"
          echo "${ENV_VARS}" | jq '.' || echo "❌ Invalid JSON in ENV_VARS"
          
          echo "Building complete container JSON:"
          CONTAINER_JSON="[{\"displayName\": \"${DISPLAY_NAME}\", \"imageUrl\": \"${IMAGE_URL}\", \"environmentVariables\": ${ENV_VARS}}]"
          echo "Container JSON: ${CONTAINER_JSON}"
          
          echo "Container JSON validation:"
          echo "${CONTAINER_JSON}" | jq '.' || echo "❌ Invalid container JSON syntax"
          
          if echo "${CONTAINER_JSON}" | jq '.' > /dev/null 2>&1; then
            echo "✅ JSON syntax is valid"
          else
            echo "❌ JSON syntax is invalid - this will cause OCI CLI to fail"
            exit 1
          fi
      
      - name: Show OCI CLI command for ${{ matrix.service }} (dry run)
        run: |
          echo "=== OCI CLI Command Preview ==="
          CONTAINER_JSON="[{\"displayName\": \"${DISPLAY_NAME}\", \"imageUrl\": \"${IMAGE_URL}\", \"environmentVariables\": ${ENV_VARS}}]"
          echo "Complete command that will be executed:"
          echo ""
          echo "oci container-instances container-instance update \\"
          echo "  --container-instance-id ${{ needs.iac.outputs[matrix.ci_id_var] }} \\"
          echo "  --containers '${CONTAINER_JSON}' \\"
          echo "  --force"
          echo ""
          echo "Command length: $(echo "oci container-instances container-instance update --container-instance-id ${{ needs.iac.outputs[matrix.ci_id_var] }} --containers '${CONTAINER_JSON}' --force" | wc -c) characters"
      
      - name: Test OCI CLI basic functionality for ${{ matrix.service }}
        uses: oracle-actions/run-oci-cli-command@v1.3.2
        env:
          OCI_CLI_USER: ${{ secrets.OCI_CLI_USER }}
          OCI_CLI_TENANCY: ${{ secrets.OCI_CLI_TENANCY }}
          OCI_CLI_FINGERPRINT: ${{ secrets.OCI_CLI_FINGERPRINT }}
          OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_CLI_PRIVATE_KEY }}
          OCI_CLI_REGION: ${{ secrets.OCI_CLI_REGION }}
        with:
          command: |
            echo "Testing basic OCI CLI functionality..."
            oci container-instances container-instance get \
              --container-instance-id ${{ needs.iac.outputs[matrix.ci_id_var] }} \
              --query 'data."lifecycle-state"' \
              --raw-output
      
      - name: Update ${{ matrix.service }} Container Instance (with detailed debug)
        env:
          OCI_CLI_USER: ${{ secrets.OCI_CLI_USER }}
          OCI_CLI_TENANCY: ${{ secrets.OCI_CLI_TENANCY }}
          OCI_CLI_FINGERPRINT: ${{ secrets.OCI_CLI_FINGERPRINT }}
          OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_CLI_PRIVATE_KEY }}
          OCI_CLI_REGION: ${{ secrets.OCI_CLI_REGION }}
        run: |
          echo "=== Starting OCI CLI Update Command ==="
          set -x  # Enable command tracing
          
          # Prepare container JSON
          CONTAINER_JSON="[{\"displayName\": \"${DISPLAY_NAME}\", \"imageUrl\": \"${IMAGE_URL}\", \"environmentVariables\": ${ENV_VARS}}]"
          
          echo "Executing OCI CLI command..."
          oci container-instances container-instance update \
            --container-instance-id ${{ needs.iac.outputs[matrix.ci_id_var] }} \
            --containers "${CONTAINER_JSON}" \
            --force \
            --debug 2>&1 || {
              EXIT_CODE=$?
              echo "❌ OCI CLI failed with exit code: ${EXIT_CODE}"
              echo "=== Command that failed ==="
              echo "oci container-instances container-instance update --container-instance-id ${{ needs.iac.outputs[matrix.ci_id_var] }} --containers '${CONTAINER_JSON}' --force --debug"
              exit ${EXIT_CODE}
            }
          
          echo "✅ OCI CLI command completed successfully"
      
      - name: Wait for ${{ matrix.service }} Container Instance to be updated
        run: |
          echo "Waiting for container instance update to complete..."
          sleep 30
          
          # Check container instance status
          oci container-instances container-instance get \
            --container-instance-id ${{ needs.iac.outputs[matrix.ci_id_var] }} \
            --query 'data."lifecycle-state"' \
            --raw-output

  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    needs: [iac, deploy]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0
          terraform_wrapper: false
      
      - name: Configure OCI CLI
        uses: oracle-actions/run-oci-cli-command@v1.3.2
        env:
          OCI_CLI_USER: ${{ secrets.OCI_CLI_USER }}
          OCI_CLI_TENANCY: ${{ secrets.OCI_CLI_TENANCY }}
          OCI_CLI_FINGERPRINT: ${{ secrets.OCI_CLI_FINGERPRINT }}
          OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_CLI_PRIVATE_KEY }}
          OCI_CLI_REGION: ${{ secrets.OCI_CLI_REGION }}
        with:
          command: 'oci --version'
      
      - name: Get Load Balancer IP
        id: lb_ip
        working-directory: infra
        run: |
          terraform init
          echo "lb_ip=$(terraform output -raw load_balancer_public_ip)" >> $GITHUB_OUTPUT
        env:
          TF_VAR_user_ocid: ${{ secrets.OCI_CLI_USER }}
          TF_VAR_tenancy_ocid: ${{ secrets.OCI_CLI_TENANCY }}
          TF_VAR_fingerprint: ${{ secrets.OCI_CLI_FINGERPRINT }}
          TF_VAR_private_key: ${{ secrets.OCI_CLI_PRIVATE_KEY }}
          TF_VAR_compartment_id: ${{ secrets.OCI_COMPARTMENT_ID }}
          TF_VAR_ocir_repository: ${{ env.OCIR_REGION }}.ocir.io/${{ env.OCIR_NAMESPACE }}/${{ env.PROJECT_NAME }}
          TF_VAR_image_tag: ${{ github.sha }}
          TF_VAR_database_password: ${{ secrets.DATABASE_PASSWORD }}
      
      - name: Health Check - Frontend
        run: |
          echo "Checking frontend health at http://${{ steps.lb_ip.outputs.lb_ip }}"
          for i in {1..10}; do
            if curl -f -s http://${{ steps.lb_ip.outputs.lb_ip }}; then
              echo "Frontend is healthy!"
              exit 0
            fi
            echo "Attempt $i failed, retrying in 30 seconds..."
            sleep 30
          done
          echo "Frontend health check failed"
          exit 1
      
      - name: Health Check - Backend API
        run: |
          echo "Checking backend health at http://${{ steps.lb_ip.outputs.lb_ip }}/api/health"
          for i in {1..10}; do
            if curl -f -s http://${{ steps.lb_ip.outputs.lb_ip }}/api/health; then
              echo "Backend API is healthy!"
              exit 0
            fi
            echo "Attempt $i failed, retrying in 30 seconds..."
            sleep 30
          done
          echo "Backend API health check failed"
          exit 1